#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <inttypes.h>
#include <pthread.h>
#include <tgmath.h>
#include "squeue_lib.h"

#define SENDER_NUM 4        //number of sender
#define RECEIVER_NUM 3      //number of receiver
#define BASE_PERIOD 1000000 //unit in nano-seconds

typedef struct {
    int drop_cnt;
    queue *bus_in_q;
    queue **bus_out_q;
} deamon_arg;

typedef struct {
    int sender_id;
    int drop_cnt;
    queue *bus_in_q;
} sender_arg;

typedef struct {
    int receiver_id;
    int cnt;                   //to compute the standard deviation
    uint64_t mean_elapse_time; //to compute the standard deviation
    uint64_t square_sum;       //to compute the standard deviation
    queue *bus_out_q;       
} receiver_arg;

unsigned SquareRoot( unsigned Value ) {
    uint32_t root = 0;
    uint32_t Bit;
    // 64 bit divide routine with help from microchip appnote 
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    for ( Bit = 0x80000000L; Bit > 0; Bit >>= 1 ) {
        uint32_t trial = root + Bit;
        if ((uint64_t)trial * (uint64_t)trial < Value) {
            root += Bit;
        }
    }
    return root;
}

/*
* __iter_div_u64_rem, timespec_add_ns 
* source: https://gist.github.com/BinaryPrison/1112092
* used to compute "struct timespec" type time for clock_nanosleep
*/
static uint32_t __iter_div_u64_rem(uint64_t dividend, uint32_t divisor, uint64_t *remainder) {
    uint32_t ret = 0;
    while (dividend >= divisor) {
    /* The following asm() prevents the compiler from
       optimising this loop into a modulo operation.  */
        asm("" : "+rm"(dividend));
        dividend -= divisor;
        ret++;
    }
    *remainder = dividend;
    return ret;
}
#define NSEC_PER_SEC  1000000000L
static void timespec_add_ns(struct timespec *a, uint64_t ns) {
    a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, NSEC_PER_SEC, &ns);
    a->tv_nsec = ns;
}

#define MAX_MSG_CNT 20000    //max number of messages to create, stop after reaching
static int msn = 0;          //message serial number, also used as a counter
pthread_rwlock_t msn_rwlock; // = PTHREAD_RWLOCK_INITIALIZER; (another way to initialize.)

const int period_multiplier[] = {12, 22, 24, 26, 28, 15, 17, 19};
const int thread_priority[] = {90, 94, 95, 96, 97, 91, 92, 93};

/**different thread routines below**/

void *deamon_routine(void *arg) {
    deamon_arg *arg2 = (deamon_arg *)arg;
    struct timespec next;
    uint64_t period = BASE_PERIOD * period_multiplier[0];
    clock_gettime(CLOCK_MONOTONIC, &next);

    message **m = malloc(sizeof(message*));
    int drop_cnt = 0;

    while(1) {
        //printf("deamon\n");
        while(sq_read(arg2->bus_in_q, m) != -1) {

            //printf("bus: message_id=%d dst_id%d %p\n",(*m)->id, (*m)->dst, arg2->bus_out_q[(*m)->dst]);
            int ret = sq_write(arg2->bus_out_q[(*m)->dst], (*m));
            //check dropped
            if(ret!=0)
                drop_cnt ++;
        }

        pthread_rwlock_rdlock(&msn_rwlock);
        if(msn >= MAX_MSG_CNT) {
            pthread_rwlock_unlock(&msn_rwlock);
            arg2->drop_cnt = drop_cnt;
            pthread_exit(NULL);
        }
        pthread_rwlock_unlock(&msn_rwlock);
        
        timespec_add_ns(&next, period);
        clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &next, 0);
    }
    arg2->drop_cnt = drop_cnt;
    pthread_exit(NULL);
}

void *sender_routine(void *arg) {
    sender_arg* arg2 = (sender_arg*) arg;
    struct timespec next;
    uint64_t period = BASE_PERIOD * period_multiplier[arg2->sender_id];
    clock_gettime(CLOCK_MONOTONIC, &next);
    
    int drop_cnt = 0;

    while(1) {
        //printf("sender%d\n",arg2->sender_id);
        int n = (rand() % 4) + 1; //number of messages to send
        int i;
        for(i=0; i<n; i++) {
            message *m = malloc(sizeof(message));
            pthread_rwlock_wrlock(&msn_rwlock);
            if(msn >= MAX_MSG_CNT) {
                pthread_rwlock_unlock(&msn_rwlock);
                arg2->drop_cnt = drop_cnt;
                pthread_exit(NULL);
            }
            //printf("sender%d message_id%d\n", arg2->sender_id, msn);
            m->id = msn++; 
            m->src = arg2->sender_id;
            m->dst = rand() % RECEIVER_NUM;
            m->acc_time = 0;
            m->str = (char*) malloc(sizeof(char) * ((rand()%71)+10)); //message string length ranges from 10~80
            int ret = sq_write(arg2->bus_in_q, m);
            if(ret!=0)
                drop_cnt ++;
            pthread_rwlock_unlock(&msn_rwlock);
        }
        timespec_add_ns(&next, period);
        clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &next, 0);
    }
    arg2->drop_cnt = drop_cnt;
    pthread_exit(NULL);
}

void *receiver_routine(void* arg) {
    receiver_arg* arg2 = (receiver_arg*) arg;
    struct timespec next;
    uint64_t period = BASE_PERIOD * period_multiplier[1 + SENDER_NUM + arg2->receiver_id];
    clock_gettime(CLOCK_MONOTONIC, &next);

    message **m = malloc(sizeof(message*));
    int64_t elapse_time_sum = 0, square_sum = 0;
    int cnt = 0;

    while(1) {
        //printf("receiver%d\n", arg2->receiver_id);
        while(sq_read(arg2->bus_out_q, m) != -1) {
            //record queueing time
            //printf("receiver%d gets message%d time%lu\n", arg2->receiver_id, (*m)->id, (*m)->acc_time);
            elapse_time_sum += (*m)->acc_time;
            square_sum += ((*m)->acc_time)*((*m)->acc_time);
            printf("%"PRIu64"\n",((*m)->acc_time)*((*m)->acc_time));
            cnt ++;
        }

        pthread_rwlock_rdlock(&msn_rwlock);
        if(msn >= MAX_MSG_CNT) {
            pthread_rwlock_unlock(&msn_rwlock);
            arg2->cnt = cnt;
            arg2->mean_elapse_time = elapse_time_sum / cnt;
            arg2->square_sum = square_sum;
            pthread_exit(NULL);
        }
        pthread_rwlock_unlock(&msn_rwlock);

        timespec_add_ns(&next, period);
        clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &next, 0);
    }
    arg2->cnt = cnt;
    arg2->mean_elapse_time = elapse_time_sum / cnt;
    arg2->square_sum = square_sum;
    pthread_exit(NULL);
}


int main(int argc, char *argv[]) {

    //create queues
    queue *bus_in_q, **bus_out_q;
    bus_out_q = malloc(sizeof(queue*)*RECEIVER_NUM);
    sq_create(&bus_in_q, DEFAULT_QUEUE_LEN);
    int i;
    for (i=0; i<RECEIVER_NUM; i++) {
        sq_create(&(bus_out_q[i]), DEFAULT_QUEUE_LEN);
    }

    //prepare thread attributes and create threads
    pthread_t bus_deamon, sender[4], receiver[3];
    pthread_attr_t pth_attr;
    pthread_attr_init(&pth_attr);
    pthread_attr_setschedpolicy(&pth_attr, SCHED_RR);
    struct sched_param sched_param;
    int seq_index = 0;

    pthread_rwlock_init(&msn_rwlock, NULL);
    
    srand(time(NULL));

    deamon_arg d_arg;
    d_arg.bus_in_q = bus_in_q;
    d_arg.bus_out_q = (queue**) malloc(sizeof(queue*)*RECEIVER_NUM);
    for(i=0; i<RECEIVER_NUM; i++)
        d_arg.bus_out_q[i] = bus_out_q[i];
    sched_param.sched_priority = thread_priority[seq_index++];
    pthread_attr_setschedparam(&pth_attr, &sched_param);
    pthread_create(&bus_deamon, &pth_attr, deamon_routine, &d_arg);

    sender_arg s_arg[SENDER_NUM];
    for(i=0; i<SENDER_NUM; i++) {
        s_arg[i].sender_id = i;
        s_arg[i].bus_in_q = bus_in_q;
        sched_param.sched_priority = thread_priority[seq_index++];
        pthread_attr_setschedparam(&pth_attr, &sched_param);
        pthread_create(&sender[i], &pth_attr, sender_routine, &s_arg[i]);
    }

    receiver_arg r_arg[RECEIVER_NUM];
    for(i=0; i<RECEIVER_NUM; i++) { 
        r_arg[i].receiver_id = i;
        r_arg[i].bus_out_q = bus_out_q[i];
        sched_param.sched_priority = thread_priority[seq_index++];
        pthread_attr_setschedparam(&pth_attr, &sched_param);
        pthread_create(&receiver[i], &pth_attr, receiver_routine, &r_arg[i]);
    }

    //collect the results for display
    int total_drop_cnt = 0;
    pthread_join(bus_deamon, NULL);
    total_drop_cnt += d_arg.drop_cnt;
    
    for(i=0; i<SENDER_NUM; i++) {
        pthread_join(sender[i], NULL);
        total_drop_cnt += s_arg[i].drop_cnt;
    }

    uint64_t total_mean_elapse_time = 0;
    uint64_t total_square_sum = 0;
    int total_cnt = 0;

    for(i=0; i<RECEIVER_NUM; i++) {
        pthread_join(receiver[i], NULL);
        total_mean_elapse_time += r_arg[i].mean_elapse_time;
        total_square_sum += r_arg[i].square_sum;
        total_cnt += r_arg[i].cnt;
    }
    total_mean_elapse_time /= RECEIVER_NUM;
    long double temp = static_cast<long double>((total_square_sum/total_cnt - total_mean_elapse_time*total_mean_elapse_time));
    long double std = sqrtl(temp);
    printf("total drop number:  %d\n", total_drop_cnt);
    printf("mean elapse queueing time:  %" PRIu64 "\n", total_mean_elapse_time);
    printf("N:  %d\n",total_cnt);
    printf("standard deviation of queueing time:  %Lf\n", std);

    sq_delete(bus_in_q);
    for(i=0; i<RECEIVER_NUM; i++)
       sq_delete(bus_out_q[i]);

    return 0;
}
